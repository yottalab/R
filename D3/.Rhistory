data(churn)
rm(churnTest)
library(C50)
data(churn)
rm(churnTest)
head(churnTrain)
treeModel <- C5.0(x = churnTrain[, -20], y = churnTrain$churn,
control = C5.0Control(winnow = TRUE))
summary(treeModel)
churnTrain <- head(churnTrain)
churnTrain
# show random 3 rows
churnTrain[sample(nrow(churnTrain), 10), ]
library(C50)
data(churn)
rm(churnTest)
head(churnTrain)
treeModel <- C5.0(x = churnTrain[, -20], y = churnTrain$churn,
control = C5.0Control(winnow = TRUE))
summary(treeModel)
# show random 3 rows
churnTrain[sample(nrow(churnTrain), 10), ]
churn_rule_1 <- function(source) {
mean(source$number_customer_service_calls)
}
churn_rule_1(churnTrain)
avg_serv_call <- churn_rule_1(churnTrain)
churn_rule_2 <- function(source) {
summary(source$total_day_charge + source$total_night_charge + source$total_intl_charge)
}
sum_charge <- churn_rule_2(churnTrain)
sum_charge
source$total_day_charge
churnTrain$total_day_charge
summary(churnTrain$total_day_charge)
total(churnTrain$total_day_charge)
sum(churnTrain$total_day_charge)
churn_rule_2 <- function(source) {
sum(source$total_day_charge + source$total_night_charge + source$total_intl_charge)
}
sum_charge <- churn_rule_2(churnTrain)
sum_charge
count(churnTrain$churn)
sum(numbers == churnTrain$churn)
library(plyr)
count(churnTrain$churn)
count(churnTrain$churn == yes)
count(churnTrain$churn == "yes")
count(churnTrain$churn,"yes")
count(subset(churnTrain$churn == "yes")
)
count(subset(churnTrain, churn == "yes"))
subset(count(churnTrain, churn == "yes"))
count(subset(churnTrain, churn == "yes"))
sum(churnTrain$churn)
table(churnTrain$churn)
table(churnTrain$churn == "yes")
a< -table(churnTrain$churn)
a<- table(churnTrain$churn)
a
sum(churnTrain$churn)
count(subset(churnTrain, churn == "yes"))
count(churnTrain$churn,"yes")
count(churnTrain$churn,"yes")
count(churnTrain, churn == "yes")
count(churnTrain, churn ="yes")
count(churnTrain, "yes")
count(churnTrain, "churn")
a<- count(churnTrain, "churn")
a
a<- count(churnTrain, "churn" = yes)
a<- count(churnTrain, "churn" = "yes")
a<- count(churnTrain, "churn" == "yes")
a<- count(churnTrain, "churn")
a
a$freq
a$freq[1]
churn_rule_3 <- function(source) {
chr3<- count(churnTrain, "churn")
chr3yes<- chr3$freq[1]
chr3no<- chr3$freq[2]
}
count_churn <- churn_rule_3(churnTrain)
count_churn
churn_rule_3 <- function(source) {
chr3<- count(churnTrain, "churn")
chr3yes<- chr3$freq[1]
}
count_churn <- churn_rule_3(churnTrain)
count_churn
churn_rule_4 <- function(source) {
chr3<- count(churnTrain, "churn")
chr3yes<- chr3$freq[2]
library(C50)
library(plyr)
data(churn)
rm(churnTest)
head(churnTrain)
treeModel <- C5.0(x = churnTrain[, -20], y = churnTrain$churn,
control = C5.0Control(winnow = TRUE))
summary(treeModel)
# show random 3 rows
churnTrain[sample(nrow(churnTrain), 10), ]
churn_rule_1 <- function(source) {
mean(source$number_customer_service_calls)
}
avg_serv_call <- churn_rule_1(churnTrain)
avg_serv_call
churn_rule_2 <- function(source) {
sum(source$total_day_charge + source$total_night_charge + source$total_intl_charge)
}
sum_charge <- churn_rule_2(churnTrain)
sum_charge
churn_rule_3 <- function(source) {
chr3<- count(churnTrain, "churn")
chr3yes<- chr3$freq[1]
}
count_churn_Y <- churn_rule_3(churnTrain)
count_churn_Y
churn_rule_4 <- function(source) {
chr4<- count(churnTrain, "churn")
chr4yes<- chr4$freq[2]
}
)))))
library(C50)
library(plyr)
data(churn)
rm(churnTest)
head(churnTrain)
treeModel <- C5.0(x = churnTrain[, -20], y = churnTrain$churn,
control = C5.0Control(winnow = TRUE))
summary(treeModel)
# show random 3 rows
churnTrain[sample(nrow(churnTrain), 10), ]
churn_rule_1 <- function(source) {
mean(source$number_customer_service_calls)
}
avg_serv_call <- churn_rule_1(churnTrain)
avg_serv_call
churn_rule_2 <- function(source) {
sum(source$total_day_charge + source$total_night_charge + source$total_intl_charge)
}
sum_charge <- churn_rule_2(churnTrain)
sum_charge
churn_rule_3 <- function(source) {
chr3<- count(churnTrain, "churn")
chr3yes<- chr3$freq[1]
}
count_churn_Y <- churn_rule_3(churnTrain)
count_churn_Y
churn_rule_4 <- function(source) {
chr4<- count(churnTrain, "churn")
chr4yes<- chr4$freq[2]
}
count_churn_N <- churn_rule_4(churnTrain)
count_churn_N
sum_charge / (count_churn_Y + count_churn_N)
count_churn_Y * (sum_charge / (count_churn_Y + count_churn_N))
sum_charge - (count_churn_Y * (sum_charge / (count_churn_Y + count_churn_N)))
cat("\014")
Source <- c("A","A","A","A","A","B","B")
Target <- c("C","D","E","F","B","G","H")
NetworkData <- data.frame(Source,Target)
NetworkData
cat("\014")
d3SimpleNetwork(NetworkData, heigh=300, width=700)
library("d3Network", lib.loc="C:/Users/SinNombre/Documents/R/win-library/3.1")
library("C50", lib.loc="C:/Users/SinNombre/Documents/R/win-library/3.1")
library("dplyr", lib.loc="C:/Users/SinNombre/Documents/R/win-library/3.1")
library("plyr", lib.loc="C:/Users/SinNombre/Documents/R/win-library/3.1")
library("RCurl", lib.loc="C:/Users/SinNombre/Documents/R/win-library/3.1")
library("rjson", lib.loc="C:/Users/SinNombre/Documents/R/win-library/3.1")
d3SimpleNetwork(NetworkData, heigh=300, width=700)
links <- read.csv("links.csv", header = TRUE)
links <- read.csv("links.csv", header = TRUE)
nodes <- read.csv("nodes.csv", header = TRUE)
library("devtools", lib.loc="C:/Users/SinNombre/Documents/R/win-library/3.1")
links <- read.csv("links.csv", header = TRUE)
library("RJSONIO", lib.loc="C:/Users/SinNombre/Documents/R/win-library/3.1")
library("manipulate", lib.loc="C:/Users/SinNombre/Documents/R/win-library/3.1")
library("DataCombine", lib.loc="C:/Users/SinNombre/Documents/R/win-library/3.1")
library("data.table", lib.loc="C:/Users/SinNombre/Documents/R/win-library/3.1")
links <- read.csv("links.csv", header = TRUE)
links <- read.csv("links.csv", header = TRUE)
setwd("C:/Users/SinNombre/Desktop/D3")
links <- read.csv("links.csv", header = TRUE)
nodes <- read.csv("nodes.csv", header = TRUE)
cat("\014")
d3ForceNetwork(Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", width = 1280, height = 720,
opacity = 0.9,zoom = TRUE)
cat("\014")
library(C50)
library(plyr)
data(churn)
rm(churnTest)
head(churnTrain)
treeModel <- C5.0(x = churnTrain[, -20], y = churnTrain$churn,
control = C5.0Control(winnow = TRUE))
summary(treeModel)
# show random 3 rows
churnTrain[sample(nrow(churnTrain), 10), ]
churn_rule_1 <- function(source) {
mean(source$number_customer_service_calls)
}
avg_serv_call <- churn_rule_1(churnTrain)
avg_serv_call
churn_rule_2 <- function(source) {
sum(source$total_day_charge + source$total_night_charge + source$total_intl_charge)
}
sum_charge <- churn_rule_2(churnTrain)
sum_charge
churn_rule_3 <- function(source) {
chr3<- count(churnTrain, "churn")
chr3yes<- chr3$freq[1]
}
count_churn_Y <- churn_rule_3(churnTrain)
count_churn_Y
churn_rule_4 <- function(source) {
chr4<- count(churnTrain, "churn")
chr4yes<- chr4$freq[2]
}
count_churn_N <- churn_rule_4(churnTrain)
count_churn_N
sum_charge - (count_churn_Y * (sum_charge / (count_churn_Y + count_churn_N)))
