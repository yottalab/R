setwd("~/R/Churn/BIPBchurn")
install.packages("~/R/Churn/BIPBchurn/BIPBchurn_1.1.tar.gz", repos = NULL, type = "source")
library("BIPBchurn", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
## Load sample data
dataset<- get_dataset
## Print Head
head(dataset)
## show random 10 rows from subset
dataset[sample(nrow(dataset), 10), ]
## C01 - Count of Churn detected customers
count_churn_Y<- count_churn_Y(dataset)
count_churn_Y
install.packages("plyr")
install.packages("data.table")
install.packages("ggplot2")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
dataset<- get_dataset
## Print Head
head(dataset)
## show random 10 rows from subset
dataset[sample(nrow(dataset), 10), ]
## C01 - Count of Churn detected customers
count_churn_Y<- count_churn_Y(dataset)
count_churn_Y
## C02 - Count of customers without Churn detection
count_churn_N<- count_churn_N(dataset)
count_churn_N
## C3 - Average value of Customer Service Calls (indicator #1)
avg_serv_call<- avg_serv_call(dataset)
avg_serv_call
## C4 - Sum of outboud charges (domestic - day/night, international) (value #1)
revenue_start<- revenue_start(dataset)
revenue_start
## C5 - Calculated lost value (churn)
revenue_churn<- revenue_churn(dataset)
revenue_churn
## C6 - Calculated revenue - churn
revenue_end<- revenue_end(dataset)
revenue_end
## C7 - Churn value in percent, decimals
revenue_churn_perc<- revenue_churn_perc(dataset,1)
revenue_churn_perc
## C8 - Function (count service calls)
churn_SC30<- churn_SC3(dataset,3)
churn_SC31<- churn_SC3(dataset,4)
churn_SC32<- churn_SC3(dataset,5)
churn_SC33<- churn_SC3(dataset,6)
churn_SC34<- churn_SC3(dataset,7)
churn_SC35<- churn_SC3(dataset,8)
churn_SC36<- churn_SC3(dataset,9)
## Number of Service Calls
calls_3<- c(3,4,5,6,7,8,9)
## Probability to leave
prob_3<- c(5,8,15,26,42,68,98)
group_3<- c(churn_SC30,churn_SC31,churn_SC32,churn_SC33,churn_SC34,churn_SC35,churn_SC36)
df_3<- data.frame(calls_3,group_3,prob_3)
chart_3<- ggplot(data = df_3) + geom_line(aes(x = calls_3, y = prob_3)) + geom_area(aes(x = calls_3, y = group_3),alpha=0.2,fill="#AACC00") + scale_y_log10()
chart_3
## Load sample data
dataset<- get_dataset
## Print Head
head(dataset)
## show random 10 rows from subset
dataset[sample(nrow(dataset), 10), ]
## C01 - Count of Churn detected customers
count_churn_Y<- count_churn_Y(dataset)
count_churn_Y
## C02 - Count of customers without Churn detection
count_churn_N<- count_churn_N(dataset)
count_churn_N
## C3 - Average value of Customer Service Calls (indicator #1)
avg_serv_call<- avg_serv_call(dataset)
avg_serv_call
## C4 - Sum of outboud charges (domestic - day/night, international) (value #1)
revenue_start<- revenue_start(dataset)
revenue_start
## C5 - Calculated lost value (churn)
revenue_churn<- revenue_churn(dataset)
revenue_churn
## C6 - Calculated revenue - churn
revenue_end<- revenue_end(dataset)
revenue_end
## C7 - Churn value in percent, decimals
revenue_churn_perc<- revenue_churn_perc(dataset,1)
revenue_churn_perc<- function(source,decimal) {
tVar1<- round((revenue_start(source)/revenue_end(source))-1, digits=2+decimal)
paste0(comma(tVar1 * 100), "%")
}
revenue_churn_perc<- revenue_churn_perc(dataset,1)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
revenue_churn_perc<- revenue_churn_perc(dataset,1)
revenue_churn_perc
library("scales", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
revenue_churn_perc<- function(source,decimal) {
tVar1<- round((revenue_start(source)/revenue_end(source))-1, digits=2+decimal)
paste0(comma(tVar1 * 100), "%")
}
revenue_churn_perc<- revenue_churn_perc(dataset,1)
revenue_churn_perc
library("scales")
library("plyr")
## Load sample data
dataset<- get_dataset
## Print Head
head(dataset)
## show random 10 rows from subset
dataset[sample(nrow(dataset), 10), ]
## C01 - Count of Churn detected customers
count_churn_Y<- count_churn_Y(dataset)
count_churn_Y
## C02 - Count of customers without Churn detection
count_churn_N<- count_churn_N(dataset)
count_churn_N
## C3 - Average value of Customer Service Calls (indicator #1)
avg_serv_call<- avg_serv_call(dataset)
avg_serv_call
## C4 - Sum of outboud charges (domestic - day/night, international) (value #1)
revenue_start<- revenue_start(dataset)
revenue_start
## C5 - Calculated lost value (churn)
revenue_churn<- revenue_churn(dataset)
revenue_churn
## C6 - Calculated revenue - churn
revenue_end<- revenue_end(dataset)
revenue_end
## C7 - Churn value in percent, decimals
revenue_churn_perc<- revenue_churn_perc(dataset,1)
revenue_churn_perc
## C8 - Function (count service calls)
churn_SC30<- churn_SC3(dataset,3)
churn_SC31<- churn_SC3(dataset,4)
revenue_churn_perc<- function(source,decimal) {
tVar1<- round((revenue_start(source)/revenue_end(source))-1, digits=2+decimal)
paste0(comma(tVar1 * 100), "%")
}
revenue_churn_perc<- revenue_churn_perc(dataset,1)
revenue_churn_perc
revenue_churn_perc<- revenue_churn_perc(dataset)
revenue_churn_perc
revenue_churn_perc<- revenue_churn_perc(dataset)
revenue_churn_perc
## C8 - Function (count service calls)
churn_SC3 <- function(source,calls) {
data.frame(table(source$number_customer_service_calls >= calls))$Freq[2]
}
churn_SC30<- churn_SC3(dataset,3)
churn_SC30
churn_SC30<- churn_SC3(dataset,3)
churn_SC31<- churn_SC3(dataset,4)
churn_SC32<- churn_SC3(dataset,5)
churn_SC33<- churn_SC3(dataset,6)
churn_SC34<- churn_SC3(dataset,7)
churn_SC35<- churn_SC3(dataset,8)
churn_SC36<- churn_SC3(dataset,9)
## Number of Service Calls
calls_3<- c(3,4,5,6,7,8,9)
## Probability to leave
prob_3<- c(5,8,15,26,42,68,98)
group_3<- c(churn_SC30,churn_SC31,churn_SC32,churn_SC33,churn_SC34,churn_SC35,churn_SC36)
df_3<- data.frame(calls_3,group_3,prob_3)
chart_3<- ggplot(data = df_3) + geom_line(aes(x = calls_3, y = prob_3)) + geom_area(aes(x = calls_3, y = group_3),alpha=0.2,fill="#AACC00") + scale_y_log10()
chart_3
## C9 - Function (sum of minutes under limit)
churn_SC4<- churn_SC4(dataset,200)
detach("package:BIPBchurn", unload=TRUE)
library("BIPBchurn", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
churn_SC4<- churn_SC4(dataset,200)
cat('014')
cut('014')
cut('\014')
cat('\014')
x <- 10:1
y <- -4:5
q <- c("Hockey","Football","Baseball","Curling","Rugby","Lacrosse","Basketball","Tennis","Cricket","Soccer")
theDF <- data.frame(x,y,q)
theDF
theDF <- data.drame(First = x, Second = y, Sport = q)
theDF <- data.frame(First = x, Second = y, Sport = q)
theDF
nrow(theDF)
ncol(theDF)
dim(theDF)
names(theDF)
names(theDF)[3]
rownames(theDF)
rownames(theDF) <- c("One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten")
rownames(theDF)
rownames(theDF) <- c("One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten")
rownames(theDF) <- NULL
rownames(theDF)
rownames(theDF) <- c("One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten")
theDF
rownames(theDF) <- NULL
theDF
head(theDF)
head(theDF, n=7)
tail(theDF)
class(theDF)
theDF$Sport
theDF[3,2]
theDF[3,2:3]
theDF[c(3,5),2]
theDF[c(3,5),1]
theDF[c)3,5),2:3]
theDF[c(3,5),2:3]
theDF[,3]
theDF[,2:3]
theDF[2,]
theDF[2:4,]
theDF[,c("First","Sport")]
theDF[("Sport")]
theDF("Sport")
theDF[("Sport")]
theDF[["Sport"]]
cat("\014")
patternDist <- function(x,pattern){
apply(sign(x), 1,
function(row){
v <- row - pattern
v[is.na(pattern) & is.na(row)] <- 0
v[xor(is.na(pattern), is.na(row))] <- 1
sum( v != 0 )
})
}
set.seed(1)
x <- matrix(rnorm(40),nrow=10)
x[sample(40,4)] <- 0
x[sample(40,4)] <- NA
x <- as.data.frame(x)
x
#count of columns not matched the pattern
patternDist(x,pattern=c(-1,0,1,NA))
var(1,2,3)
r <- data.frame(1,2,3)
var(r)
vx <- var(x)*biaser
