df
calls<- c(3,4,5,6,7,8,9)
df<- data.frame(calls,group<- c(churn_SC3,churn_SC4,churn_SC5,churn_SC6,churn_SC7,churn_SC8,churn_SC9),prob)
df
prob<- c(5,8,15,26,42,68,98)
group<- c(churn_SC3,churn_SC4,churn_SC5,churn_SC6,churn_SC7,churn_SC8,churn_SC9)
df<- data.frame(calls,group,prob)
df
ggplot(data = df) + geom_line(aes(x = x, y = z)) + geom_area(aes(x = x, y = y),alpha=0.2,fill="#AACC00") + scale_y_log10()
ggplot(data = df) + geom_line(aes(x = calls, y = prob)) + geom_area(aes(x = calls, y = group),alpha=0.2,fill="#AACC00") + scale_y_log10()
head(dataset)
total_day_minutes
chr<- data.frame(table(source$total day minutes >= calls))
chr<- data.frame(table(source$total_day_minutes >= calls))
chr<- data.frame(table(source$total_day_minutes <= 20))
table(source$total_day_minutes <= 20)
table(dataset$total_day_minutes <= 20)
table(dataset$total_night_minutes <= 20)
table(dataset$total_intl_minutes <= 20)
data.frame(table(dataset$total_day_minutes <= 20))
data.frame(table(dataset$total_day_minutes <= 20))$Freq[2]
dataset$total_day_minutes <= 20
table(dataset$total_day_minutes <= 20)
table(dataset$total_day_minutes <= 50)
table(dataset$total_day_minutes + dataset$total_night_minutes)
table(dataset$total_day_minutes + dataset$total_night_minutes <= 50)
table(dataset$total_day_minutes + dataset$total_night_minutes <= 100)
table(dataset$total_day_minutes + dataset$total_night_minutes <= 200)
data.frame(table(dataset$total_day_minutes + dataset$total_night_minutes <= 200))
data.frame(table(dataset$total_day_minutes + dataset$total_night_minutes <= 200))$Freq[2]
library(BIPBchurn)
get_dataset = read.csv("dataset/BIPBchurnTraining.csv")
dataset<- get_dataset
churn_SC4<- churn_SC4(dataset,200)
library(BIPBchurn)
churn_SC4<- churn_SC4(dataset,200)
## Load sample data
dataset<- get_dataset
## Print Head
head(dataset)
## show random 10 rows from subset
dataset[sample(nrow(dataset), 10), ]
## C01 - Count of Churn detected customers
count_churn_Y<- count_churn_Y(dataset)
count_churn_Y
## C02 - Count of customers without Churn detection
count_churn_N<- count_churn_N(dataset)
count_churn_N
## C3 - Average value of Customer Service Calls (indicator #1)
avg_serv_call<- avg_serv_call(dataset)
avg_serv_call
## C4 - Sum of outboud charges (domestic - day/night, international) (value #1)
revenue_start<- revenue_start(dataset)
revenue_start
## C5 - Calculated lost value (churn)
revenue_churn<- revenue_churn(dataset)
revenue_churn
## C6 - Calculated revenue - churn
revenue_end<- revenue_end(dataset)
revenue_end
## C7 - Churn value in percent, decimals
revenue_churn_perc<- revenue_churn_perc(dataset,1)
revenue_churn_perc
## C8 - Function (count service calls)
churn_SC3<- churn_SC3(dataset,3)
churn_SC4<- churn_SC3(dataset,4)
churn_SC5<- churn_SC3(dataset,5)
churn_SC6<- churn_SC3(dataset,6)
churn_SC7<- churn_SC3(dataset,7)
churn_SC8<- churn_SC3(dataset,8)
churn_SC9<- churn_SC3(dataset,9)
## Number of Service Calls
calls<- c(3,4,5,6,7,8,9)
## Probability to leave
prob<- c(5,8,15,26,42,68,98)
group<- c(churn_SC3,churn_SC4,churn_SC5,churn_SC6,churn_SC7,churn_SC8,churn_SC9)
df<- data.frame(calls,group,prob)
ggplot(data = df) + geom_line(aes(x = calls, y = prob))
+ geom_area(aes(x = calls, y = group),alpha=0.2,fill="#AACC00")
+ scale_y_log10()
chart<- ggplot(data = df) + geom_line(aes(x = calls, y = prob))
chart<- chart + geom_area(aes(x = calls, y = group),alpha=0.2,fill="#AACC00")
chart<- chart + scale_y_log10()
chart<- ggplot(data = df) + geom_line(aes(x = calls, y = prob))
chart<- chart + geom_area(aes(x = calls, y = group),alpha=0.2,fill="#AACC00")
chart<- chart + scale_y_log10()
chart<- ggplot(data = df) + geom_line(aes(x = calls, y = prob)) + geom_area(aes(x = calls, y = group),alpha=0.2,fill="#AACC00") + scale_y_log10()
df<- data.frame(calls,group,prob)
chart<- ggplot(data = df) + geom_line(aes(x = calls, y = prob)) + geom_area(aes(x = calls, y = group),alpha=0.2,fill="#AACC00") + scale_y_log10()
chart
churn_SC4<- churn_SC4(dataset,200)
churn
churn_SC4
table(dataset$total_day_minutes
)
data.frame(table(dataset$total_day_minutes))
data.frame(table(dataset$total_day_minutes <= 200))
data.frame(table(dataset$total_day_minutes <= 50))
data.frame(table(dataset$total_day_minutes <= 50),table(sum(dataset$total_day_charge))
)
data.frame(table(dataset$total_day_minutes <= 50),table(sum(dataset$total_day_charge)))
head(dataset)
library("RSQLite")
install.packages("RSQLite")
library("RSQLite", lib.loc="C:/Users/SinNombre/Documents/R/win-library/3.1")
db <- dbConnect(SQLite(), dbname = file.path(dataset))
db <- dbConnect(SQLite(), dbname = dataset)
## ----init, echo=FALSE, results='hide', cache=FALSE-----------------------
knit_child("config_knitr.R")
rxSetComputeContext(RxLocalParallel())
rxOptions(
reportProgress=0
)
opts_chunk$set(tidy=FALSE)
## dir config
data.path <- "data"
output.path <- "xdf"
sample.data.dir <- rxOptions()[["sampleDataDir"]]
## ----sort----------------------------------------------------------------
# sort on year and credit score columns
mortgages <- file.path(output.path, "mortgages.xdf")
rxSort(inData = mortgages,
outFile = mortgages,
sortByVars = c("year", "creditScore"),
decreasing = c(FALSE, TRUE),
overwrite = TRUE)
## ----sort-results--------------------------------------------------------
rxGetInfo(mortgages, numRows = 3)
## ----dataframe-account---------------------------------------------------
account <- data.frame(
acct    = c(0538, 0538, 0538, 0763, 1534),
billee  = c("Ryan G", "Ryan G", "Ryan G", "Seth M", "Jamie O"),
patient = c(1, 2, 3, 1, 1)
)
account
## ----dataframe-procedure-------------------------------------------------
procedure <- data.frame(
acct    = c(0538, 0538, 0538, 0538, 0763, 0763, 0763),
patient = c(3, 2, 2, 3, 1, 1, 2),
type    = c("OffVisit", "AdultPro", "OffVisit", "2SurfCom", "OffVisit", "AdultPro", "OffVisit")
)
procedure
## ----inner-merge---------------------------------------------------------
# inner merge
# Note: all records that don't have matches are ommitted
rxMerge(inData1 = account, inData2 = procedure,
type = "inner",
matchVars = c("acct", "patient"))
## ----left-outer-merge----------------------------------------------------
# left outer merge
# all records from the first data frame are included
rxMerge(inData1 = account, inData2 = procedure,
type = "left",
matchVars = c("acct", "patient"))
## ----right-outer-merge---------------------------------------------------
# right outer merge
# all records from the second data frame are included
rxMerge(inData1 = account, inData2 = procedure,
type = "right",
matchVars = c("acct", "patient"))
## ----full-outer-merge----------------------------------------------------
# full outer merge
# all records from both files are included
rxMerge(inData1 = account, inData2 = procedure,
type = "full",
matchVars = c("acct", "patient"))
## ----one-to-one-merge----------------------------------------------------
# one-to-one merge
# the two data files must have the same number of rows
df1 <- data.frame(
y1 = c("a", "b", "c"),
x1 = 1:3,
z1 = c("x", "y", "z")
)
df2 <- data.frame(
x2 = 101:103,
y2 = c("d", "e", "f"),
z2 = c("u", "v", "w")
)
rxMerge(inData1 = df1, inData2 = df2,
type = "oneToOne")
## ----union-merge---------------------------------------------------------
# union merge
# the two data files must have the same number of columns
names(df2) <- c("x1", "x2", "x3")
rxMerge(inData1 = df1, inData2 = df2,
type = "union")
## ----merge-xdf-----------------------------------------------------------
double <- file.path(output.path, "double.xdf")
rxMerge(inData1 = mortgages,
inData2 = mortgages,
outFile = double,
type = "union",
overwrite = TRUE)
rxGetInfo(double, numRows = 3)
## ----create-education-data-frame-----------------------------------------
# create a data frame with per capita expenditures for each state
education <- data.frame(
state = c("Connecticut", "Washington", "Indiana"),
experience = c(1795.57, 1170.46, 1289.66)
)
education
## ----merge-xdf-df--------------------------------------------------------
# merge a data frame and a xdf
census <- file.path(sample.data.dir, "CensusWorkers.xdf")
# merge in the new variable
education.xdf <- file.path(output.path, "education.xdf")
rxMerge(inData1 = census,
inData2 = education,
outFile = education.xdf,
matchVars = "state",
overwrite = TRUE)
rxGetInfo(education, numRows = 3)
## ----exercise-factors-help, tidy=FALSE, eval=FALSE-----------------------
## ?rxXdfToText
## ?rxSplit
## ?rxFactors
## mortgages <- file.path(output.path, "mortgages.xdf")
##
## ----mortgages-transform-------------------------------------------------
dataList[["F_creditScore"]] <- cut(x=dataList[["creditScore"]], breaks = c(750, 800, 850, 900))
newTransformFunc <- function(dataList) {
dataList[["stringYear"]] <- as.character(dataList[["year"]])
return(dataList)
}
mortgages <- file.path(sample.data.dir, "mortDefaultSmall.xdf")
mortgages_good_credit <- file.path(output.path, "mortgages_good_credit.xdf")
rxDataStep(inData=mortgages,
outFile      = mortgages_good_credit,
rowSelection = creditScore >= 700,
transformFunc=newTransformFunc,
overwrite=TRUE)
## ----mortgages-transform-view--------------------------------------------
rxGetInfo(mortgages_good_credit, getVarInfo=TRUE,
numRows=3, startRow=1000)
## ----rhelp, eval=FALSE---------------------------------------------------
## ?rxXdfToText
## ?rxSplit
## ?rxFactors
## mortgages <- file.path(output.path, "mortgages.xdf")
## ----mortgages-factor-year-----------------------------------------------
## Let's undo the importing of multiple csv files into a single xdf file
mortgages <- file.path(output.path, "mortgages.xdf")
## First, If we haven't already, convert our split by variable to a factor variable
rxFactors(inData=mortgages,
outFile=mortgages,
factorInfo=list(factor_year = list(levels=c(2000:2009), varName="year")),
overwrite=TRUE)
rxGetVarInfo(mortgages)
## ----mortgages-split-----------------------------------------------------
## rxSplit: split xdf into multiple text files
mortgages_list <- rxSplit(mortgages,
splitByFactor = "factor_year",
outFilesBase = file.path(output.path, "split_mortgages"),
reportProgress = 0, verbose = 0, overwrite = TRUE)
mortgages_list
## ----mortgages-split-export----------------------------------------------
## rxXdfToText: exporting xdf to text file
for (xdf_file in Sys.glob(file.path(output.path, "split_mortgages.factor_year.*.xdf"))) {
## build file name for writing
csv_file <- sub("xdf$", "csv", xdf_file)
## read file into xdf file
rxXdfToText(inFile=xdf_file, outFile=csv_file, overwrite=TRUE)
}
## ----mortgages-----------------------------------------------------------
mortgages <- file.path(output.path, "mortgages.xdf")
## ----mortgages-transform-decades-----------------------------------------
mortgages <- file.path(output.path, "mortgages.xdf")
houseAgeTrans <- function(dataList){
dataList$houseAgeDecade <- cut(dataList$houseAge,
breaks=seq(from = 0, to = 40, by = 10),
right = FALSE)
return(dataList)
}
rxDataStep(inData  = mortgages, outFile = mortgages,
transformFunc = houseAgeTrans, transformVars=c("houseAge"),
overwrite=TRUE)
head(dataset)
only_ks<- subset(dataset, state %in% "KS")
only_ks
head(only_ks)
only_ks<- subset(dataset, state %in% "KS","OH")
only_ks<- subset(dataset, state %in% ("KS","OH"))
only_ks<- subset(dataset, state %in% "KS,OH")
head(only_ks)
only_ks<- subset(dataset, state %in% "KS""OH")
only_ks<- subset(dataset, state %in% country)
country<- c("KS","OH")
only_ks<- subset(dataset, state %in% country)
head(only_ks)
only_ks<- subset(dataset, state %in% c("KS","OH"))
head(only_ks)
only_ks<- subset(dataset, total_day_minutes <= 50)
subset(dataset, total_day_minutes <= 50)
subset(dataset, total_day_minutes <= 10)
subset(dataset, number_customer_service_calls >= 9)
tVar2<- subset(dataset, number_customer_service_calls >= 9)
tVar2
sum(tVar2$total_intl_calls)
sum(tVar2$total_day_charge + tVar2$total_night_charge + tVar2$total_intl_charge)
library(BIPBchurn)
dataset<- get_dataset
churn_SC5<- churn_SC5(dataset,9)
churn_SC5
churn_SC5<- churn_SC5(dataset,8)
churn_SC5
churn_SC5
churn_SC5<- churn_SC5(dataset,7)
churn_SC5
churn_SC5<- churn_SC5(dataset,6)
churn_SC5
churn_SC5<- churn_SC5(dataset,5)
churn_SC5
churn_SC5<- churn_SC5(dataset,9)
churn_SC5
churn_SC6<- churn_SC6(dataset,8)
churn_SC6
churn_SC7<- churn_SC7(dataset,7)
churn_SC7
churn_SC5<- churn_SC5(dataset,9)
churn_SC5
churn_SC5<- churn_SC5(dataset,9)
churn_SC5
churn_SC6<- churn_SC5(dataset,8)
churn_SC6
churn_SC7<- churn_SC5(dataset,7)
churn_SC7
churn_SC8<- churn_SC5(dataset,6)
churn_SC8
churn_SC9<- churn_SC5(dataset,5)
churn_SC9
churn_SC10<- churn_SC5(dataset,4)
churn_SC10
churn_SC11<- churn_SC5(dataset,3)
churn_SC11
dataset<- get_dataset
## Print Head
head(dataset)
## show random 10 rows from subset
dataset[sample(nrow(dataset), 10), ]
## C01 - Count of Churn detected customers
count_churn_Y<- count_churn_Y(dataset)
count_churn_Y
## C02 - Count of customers without Churn detection
count_churn_N<- count_churn_N(dataset)
count_churn_N
## C3 - Average value of Customer Service Calls (indicator #1)
avg_serv_call<- avg_serv_call(dataset)
avg_serv_call
## C4 - Sum of outboud charges (domestic - day/night, international) (value #1)
revenue_start<- revenue_start(dataset)
revenue_start
## C5 - Calculated lost value (churn)
revenue_churn<- revenue_churn(dataset)
revenue_churn
## C6 - Calculated revenue - churn
revenue_end<- revenue_end(dataset)
revenue_end
## C7 - Churn value in percent, decimals
revenue_churn_perc<- revenue_churn_perc(dataset,1)
revenue_churn_perc
## C8 - Function (count service calls)
churn_SC3<- churn_SC3(dataset,3)
churn_SC4<- churn_SC3(dataset,4)
churn_SC5<- churn_SC3(dataset,5)
churn_SC6<- churn_SC3(dataset,6)
churn_SC7<- churn_SC3(dataset,7)
churn_SC8<- churn_SC3(dataset,8)
churn_SC9<- churn_SC3(dataset,9)
## Number of Service Calls
calls<- c(3,4,5,6,7,8,9)
## Probability to leave
prob<- c(5,8,15,26,42,68,98)
group<- c(churn_SC3,churn_SC4,churn_SC5,churn_SC6,churn_SC7,churn_SC8,churn_SC9)
df<- data.frame(calls,group,prob)
chart<- ggplot(data = df) + geom_line(aes(x = calls, y = prob)) + geom_area(aes(x = calls, y = group),alpha=0.2,fill="#AACC00") + scale_y_log10()
chart
## C9 - Function (sum of minutes under limit)
churn_SC4<- churn_SC4(dataset,200)
churn_SC4
churn_SC5<- churn_SC5(dataset,9)
churn_SC5
churn_SC6<- churn_SC5(dataset,8)
churn_SC6
churn_SC7<- churn_SC5(dataset,7)
churn_SC7
churn_SC8<- churn_SC5(dataset,6)
churn_SC8
churn_SC9<- churn_SC5(dataset,5)
churn_SC9
churn_SC10<- churn_SC5(dataset,4)
churn_SC10
churn_SC11<- churn_SC5(dataset,3)
churn_SC11
churn_SC5<- churn_SC5(dataset,9)*1.05
churn_SC5<- churn_SC5(dataset,9)*1.05
churn_SC5<- churn_SC5(dataset,9)*1.05
churn_SC5
churn_SC5<- churn_SC5(dataset,9)*.05
churn_SC5
churn_SC5<- churn_SC5(dataset,9)*.98
churn_SC5
churn_SC6<- churn_SC5(dataset,8)*.68
churn_SC6
churn_SC7<- churn_SC5(dataset,7)*.42
churn_SC7
churn_SC8<- churn_SC5(dataset,6)*.26
churn_SC8
churn_SC9<- churn_SC5(dataset,5)*.15
churn_SC9
churn_SC10<- churn_SC5(dataset,4).08
churn_SC10
churn_SC11<- churn_SC5(dataset,3).05
churn_SC4<- churn_SC4(dataset,200)
churn_SC4
churn_SC5<- churn_SC5(dataset,9)*.98
churn_SC5
churn_SC6<- churn_SC5(dataset,8)*.68
churn_SC6
churn_SC7<- churn_SC5(dataset,7)*.42
churn_SC7
churn_SC8<- churn_SC5(dataset,6)*.26
churn_SC8
churn_SC9<- churn_SC5(dataset,5)*.15
churn_SC9
churn_SC10<- churn_SC5(dataset,4)*.08
churn_SC10
churn_SC11<- churn_SC5(dataset,3)*.05
churn_SC11
churn_SC30<- churn_SC3(dataset,3)
churn_SC31<- churn_SC3(dataset,4)
churn_SC32<- churn_SC3(dataset,5)
churn_SC33<- churn_SC3(dataset,6)
churn_SC34<- churn_SC3(dataset,7)
churn_SC35<- churn_SC3(dataset,8)
churn_SC36<- churn_SC3(dataset,9)
## Number of Service Calls
calls_3<- c(3,4,5,6,7,8,9)
## Probability to leave
prob_3<- c(5,8,15,26,42,68,98)
group_3<- c(churn_SC30,churn_SC31,churn_SC32,churn_SC33,churn_SC34,churn_SC35,churn_SC36)
df_3<- data.frame(calls_3,group_3,prob_3)
chart_3<- ggplot(data = df_3) + geom_line(aes(x = calls_3, y = prob_3)) + geom_area(aes(x = calls_3, y = group_3),alpha=0.2,fill="#AACC00") + scale_y_log10()
chart_3
## C9 - Function (sum of minutes under limit)
churn_SC4<- churn_SC4(dataset,200)
churn_SC4
churn_SC50<- churn_SC5(dataset,9)*.98
churn_SC51<- churn_SC5(dataset,8)*.68
churn_SC52<- churn_SC5(dataset,7)*.42
churn_SC53<- churn_SC5(dataset,6)*.26
churn_SC54<- churn_SC5(dataset,5)*.15
churn_SC55<- churn_SC5(dataset,4)*.08
churn_SC56<- churn_SC5(dataset,3)*.05
## Number of Service Calls
calls_5<- c(3,4,5,6,7,8,9)
group_5<- c(churn_SC50,churn_SC51,churn_SC52,churn_SC53,churn_SC54,churn_SC55,churn_SC56)
df_5<- data.frame(calls_5,group_5)
chart_5<- ggplot(data = df_5) + geom_line(aes(x = calls_3, y = prob_3)) + geom_area(aes(x = calls_3, y = group_3),alpha=0.2,fill="#AACC00") + scale_y_log10()
chart_5<- ggplot(data = df_5) + geom_line(aes(x = calls_5, y = prob_5)) + geom_area(aes(x = calls_5, y = group_5)
chart_5
chart_5<- ggplot(data = df_5) + geom_line(aes(x = calls_5, y = prob_5))
chart_5
chart_5<- ggplot(data = df_5) + geom_line(aes(x = calls_5, y = group_5))
chart_5
churn_SC50<- churn_SC5(dataset,3)*.05
churn_SC51<- churn_SC5(dataset,4)*.08
churn_SC52<- churn_SC5(dataset,5)*.15
churn_SC53<- churn_SC5(dataset,6)*.26
churn_SC54<- churn_SC5(dataset,7)*.42
churn_SC55<- churn_SC5(dataset,8)*.68
churn_SC56<- churn_SC5(dataset,9)*.98
## Number of Service Calls
calls_5<- c(3,4,5,6,7,8,9)
df_5<- data.frame(calls_5,group_5)
group_5<- c(churn_SC50,churn_SC51,churn_SC52,churn_SC53,churn_SC54,churn_SC55,churn_SC56)
chart_5<- ggplot(data = df_5) + geom_line(aes(x = calls_5, y = group_5))
chart_5
chart_5
churn_SC4
churn_SC30<- churn_SC3(dataset,3)
churn_SC31<- churn_SC3(dataset,4)
churn_SC32<- churn_SC3(dataset,5)
churn_SC33<- churn_SC3(dataset,6)
churn_SC34<- churn_SC3(dataset,7)
churn_SC35<- churn_SC3(dataset,8)
churn_SC36<- churn_SC3(dataset,9)
## Number of Service Calls
calls_3<- c(3,4,5,6,7,8,9)
## Probability to leave
prob_3<- c(5,8,15,26,42,68,98)
group_3<- c(churn_SC30,churn_SC31,churn_SC32,churn_SC33,churn_SC34,churn_SC35,churn_SC36)
df_3<- data.frame(calls_3,group_3,prob_3)
chart_3<- ggplot(data = df_3) + geom_line(aes(x = calls_3, y = prob_3)) + geom_area(aes(x = calls_3, y = group_3),alpha=0.2,fill="#AACC00") + scale_y_log10()
chart_3
## C9 - Function (sum of minutes under limit)
churn_SC4<- churn_SC4(dataset,200)
churn_SC4
churn_SC50<- churn_SC5(dataset,3)*.05
churn_SC51<- churn_SC5(dataset,4)*.08
churn_SC52<- churn_SC5(dataset,5)*.15
churn_SC53<- churn_SC5(dataset,6)*.26
churn_SC54<- churn_SC5(dataset,7)*.42
churn_SC55<- churn_SC5(dataset,8)*.68
churn_SC56<- churn_SC5(dataset,9)*.98
## Number of Service Calls
calls_5<- c(3,4,5,6,7,8,9)
group_5<- c(churn_SC50,churn_SC51,churn_SC52,churn_SC53,churn_SC54,churn_SC55,churn_SC56)
df_5<- data.frame(calls_5,group_5)
chart_5<- ggplot(data = df_5) + geom_line(aes(x = calls_5, y = group_5))
chart_5
library(BIPBchurn)
